#!/usr/bin/env ruby
require 'rubygems'
require 'fileutils'
require 'yaml'
require 'nokogiri'
require 'pathname'
require 'colored'
require 'crass'
require 'date'
require_relative 'lib/agric/version'

module Agric
  class Compiler
    SVG_NAMESPACES = {
      dc: 'http://purl.org/dc/elements/1.1/',
      cc: 'http://creativecommons.org/ns#',
      rdf: 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
      svg: 'http://www.w3.org/2000/svg',
      sodipodi: 'http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd',
      inkscape: 'http://www.inkscape.org/namespaces/inkscape'
    }.freeze

    META = {
      filename: 'agric',
      family:   'Agric',
      version:   Agric::VERSION,
      name:     'agric'
    }.freeze

    def initialize(_options = {})
      @root = Pathname.new(File.expand_path(__FILE__)).dirname
      @sources = @root.join('src')
      @lib = @root.join('lib')
      @assets = @root.join('app', 'assets')
      @compiler_dir = @root.join('compiler')
      @convert_script = @compiler_dir.join('convert.pe')
      @glyphs = @root.join('glyphs')
      @output_font_file = @assets.join('fonts', "#{META[:filename]}.svg")
      @aliases = {}
    end

    def command(cmds)
      puts cmds.to_s.cyan
      system(cmds)
    end

    def download_github_tag(user, repo, tag, dir, options = {})
      puts " * Download #{user}/#{repo} v#{tag}...".yellow
      tag_name = options[:without_v] ? tag : "v#{tag}"
      FileUtils.mkdir_p(dir.dirname)
      Dir.chdir(dir.dirname) do
        unless File.exist?("#{tag_name}.tar.gz")
          command("wget https://github.com/#{user}/#{repo}/archive/#{tag_name}.tar.gz")
        end
        command("tar xzvf #{tag_name}.tar.gz")
        FileUtils.mv("#{repo}-#{tag}", dir.basename.to_s)
      end
    end

    # Normalize font with conversion into proper SVG file
    def normalize_font(source, destination, options = {})
      hexa = options[:hexa] || {}
      interm = source.dirname.join(source.basename('.*').to_s + '.svg')
      if interm.exist?
        puts "No conversion needed for #{interm}".white
      else
        command("fontforge -quiet -script #{@convert_script} #{source} svg")
      end
      i = File.open(interm)
      doc = Nokogiri::XML(i) do |config|
        config.nonet.strict.noblanks
      end
      i.close
      doc.root.xpath('//svg:glyph[@d]', SVG_NAMESPACES).each do |glyph|
        name = glyph.attr('glyph-name')
        unicode = glyph.attr('unicode').to_s
        if unicode[0]
          hex = '%4.4x' % unicode[0].ord
          name = hexa[hex] if hexa[hex]
        end
        if name && name =~ /^[a-z0-9]+((\_|\-)[a-z0-9]+)*$/
          glyph['glyph-name'] = name.gsub(/[^a-z0-9]+/, '-')
        else
          puts "    - weird name (#{unicode.inspect}): #{name.inspect.red} "
        end
      end
      doc.root.default_namespace = SVG_NAMESPACES[:svg]
      for name, url in SVG_NAMESPACES
        doc.root.add_namespace(name.to_s, url)
      end
      File.open(destination, 'wb') do |f|
        f.write doc.to_s
      end
    end

    def prepare_font_awesome(options = {})
      puts 'Prepare awesome...'.yellow
      tag = options[:tag] || '4.6.3'
      repository_dir = @root.join('tmp', 'fonts', "awesome-#{tag}")
      font_dir = options[:output] || @sources.join(options[:source] || '100-awesome')

      # Get latest source
      unless File.exist?(repository_dir)
        download_github_tag('FortAwesome', 'Font-Awesome', tag, repository_dir)
      end

      # Normalize
      puts ' * Sets config...'.yellow
      hexa = {}
      FileUtils.rm_rf(font_dir)
      FileUtils.mkdir_p(font_dir)
      File.open(font_dir.join('config.yml'), 'wb') do |f|
        icons = YAML.load_file(repository_dir.join('src', 'icons.yml'))
        # raise icons.inspect
        config = { 'glyphs' => icons['icons'].collect { |h| { 'css' => h['id'], 'from' => '0x' + h['unicode'] } } }
        for icon in icons['icons']
          hexa[icon['unicode']] = icon['id']
          next unless icon['aliases']
          for a in icon['aliases']
            @aliases[a] = icon['id']
            config['glyphs'] << { 'css' => a, 'from' => '0x' + icon['unicode'] }
          end
        end
        f.write(config.to_yaml)
      end

      puts ' * Write normalized file...'.yellow
      source = repository_dir.join('src', 'assets', 'font-awesome', 'fonts', 'FontAwesome.otf')
      normalize_font(source, font_dir.join('font.svg'), hexa: hexa)
    end

    def prepare_font_material(options = {})
      puts 'Prepare material...'.yellow
      tag = options[:tag] || '2.2.0'
      repository_dir = @root.join('tmp', 'fonts', "material-#{tag}")
      font_dir = options[:output] || @sources.join(options[:source] || '099-material')

      # Get latest source
      unless File.exist?(repository_dir)
        download_github_tag('zavoloklom', 'material-design-iconic-font', tag, repository_dir, without_v: true)
      end

      # Normalize config file
      puts ' * Sets config...'.yellow
      hexa = {}
      FileUtils.rm_rf(font_dir)
      FileUtils.mkdir_p(font_dir)
      File.open(font_dir.join('config.yml'), 'wb') do |f|
        config = { 'glyphs' => [] }
        # repository_dir.join("dist", "css", "material-design-iconic-font.css")
        css = Crass.parse(File.read(repository_dir.join('dist', 'css', 'material-design-iconic-font.css').to_s))
        css.each do |statement|
          next unless statement[:node] == :style_rule && (selector = statement[:selector])
          next unless selector[:value] =~ /^\.zmdi-.*\:before$/
          name = selector[:tokens][1][:value].gsub(/^zmdi\-/, '')
          unicode = statement[:children][1][:value][2..5]
          config['glyphs'] << { 'css' => name, 'from' => "0x#{unicode}" }
          hexa[unicode] = name
        end
        f.write(config.to_yaml)
      end

      puts ' * Write normalized file...'.yellow
      source = repository_dir.join('dist', 'fonts', 'Material-Design-Iconic-Font.ttf')
      normalize_font(source, font_dir.join('font.svg'), hexa: hexa)
    end

    # Explodes all font characters in one dir
    def explode_fonts
      puts 'Explode fonts...'.yellow
      FileUtils.rm_rf(@glyphs)
      FileUtils.mkdir_p(@glyphs)
      Dir.chdir(@sources) do
        for font_fullname in Dir['*'].sort
          font_dir = @sources.join(font_fullname)
          font_name = font_fullname.split('-')[1..-1].join('-')
          font_file = font_dir.join('font.svg')
          config_file = font_dir.join('config.yml')
          if font_file.exist? && config_file.exist?
            command("node_modules/.bin/svg-font-dump -n -c #{config_file} -f -i #{font_file} -o #{@glyphs}")
          end
        end
      end
      # Removes weird icons
      Dir.chdir(@glyphs) do
        Dir.glob('{*,.*}').sort.collect do |cf|
          next if cf.to_s =~ /\A[a-z0-9]+(\-[a-z0-9]+)*\.svg\z/
          next if ['..', '.'].include? cf
          puts ' - ' + "Remove #{cf}".red
          FileUtils.rm_f(cf)
        end
      end
    end

    # export to PNG with imagemagick in tmp/png folder
    def export_png(icon_size = 200)
      @glyphs.glob('*.svg').map do |p|
        # puts p.dirname.inspect.yellow
        # puts p.basename.inspect.red
        # puts p.basename('.svg').inspect.yellow
        png_file = @root.join('tmp', 'png', p.basename('.svg').to_s + '.png')
        command("convert -background none -size #{icon_size}x#{icon_size} #{p} #{png_file}")
      end
    end

    def compile!
      # puts "Compiler dir: #{@compiler_dir}".yellow
      # puts "Sources dir:  #{@sources}".yellow
      #
      # prepare_font_material tag: '2.2.0', source: '099-material'
      # prepare_font_awesome tag: '4.6.3', source: '100-awesome'
      #
      # explode_fonts
      #
      # return if ENV['ONLY'] == 'explode'
      #
      # config_file = @compiler_dir.join('config.yml')
      # config = {
      #   'font' => {
      #     'version' => META[:version],
      #     'fontname' => META[:name],
      #     'fullname' => "#{META[:family]} (#{META[:name]})",
      #     'familyname' => META[:family],
      #     'copyright' => "Copyright (C) 2013-#{Date.today.year} by #{META[:family]}",
      #     'ascent' => 850,
      #     'descent' => 150,
      #     'weight' => 'Regular'
      #   }
      # }
      #
      # reference_file = @compiler_dir.join('reference.yml')
      # FileUtils.cp(reference_file, @root.join('tmp', "reference-#{Time.now.to_i.to_s(36)}.yml"))
      # reference = YAML.load_file(reference_file)
      # reference = {} unless reference.is_a?(Hash)
      #
      # icons = {}
      # Dir.chdir(@glyphs) do
      #   Dir.glob('*').sort.collect do |cf|
      #     name = cf.split(/\./).first.to_s
      #     unless reference.key?(name)
      #       reference[name] = (reference.values.sort.last || 'efff').to_i(16).succ.to_s(16)
      #     end
      #     icons[name] = reference[name]
      #   end
      # end
      #
      # # Removes undefined glyphs from reference
      # for ref in reference.keys
      #   reference.delete(ref) unless icons.keys.include?(ref)
      # end
      #
      # File.open(reference_file, 'wb') do |f|
      #   f.write "# Auto-updated. Nothing to touch.\n"
      #   for name, code in reference
      #     f.write "'#{name}': '#{code}'\n"
      #   end
      # end
      #
      # # Build glyphs
      # config['glyphs'] = icons.sort { |a, b| a[1] <=> b[1] }.collect do |name, unicode|
      #   { 'css' => name, 'code' => unicode.to_i(16) }
      # end
      #
      # File.open(config_file, 'wb') do |f|
      #   f.write config.to_yaml
      # end

      icons = @glyphs.glob('*.svg').map do |p|
        parts = p.basename('.svg').to_s.split('-')
        [parts[1..].join('-'), parts[0].gsub(/\Au/, '')]
      end.to_h

      # Recompose font
      command("node_modules/.bin/svgicons2svgfont --fontname=agric #{@glyphs}/*.svg > #{@output_font_file}")
      # command("node_modules/.bin/svg-font-create -c #{config_file} -s #{@compiler_dir.join('svgo.yml')} -i #{@glyphs} -o #{@output_font_file}")
      # # Adds aliases
      # @aliases.each do |name, original|
      #   icons[name] ||= icons[original]
      # end
      #
      # puts 'Update font.svg'.yellow
      #
      # f = File.open(@output_font_file)
      # doc = Nokogiri::XML(f) do |config|
      #   config.nonet.strict.noblanks
      # end
      # f.close
      #
      # doc.root.xpath('//font-face[@font-family]').each do |face|
      #   face['font-family'] = META[:family]
      # end
      # File.open(@output_font_file, 'wb') do |f|
      #   f.write doc.to_s
      # end

      puts 'Export font in other formats...'.yellow

      # Convert SVG font to all needed format
      command("fontforge -quiet -script #{@convert_script} #{@output_font_file} ttf")
      # TODO the command woff doesnt work anymore
      command("fontforge -quiet -script #{@convert_script} #{@output_font_file} woff2")
      # if doesn't work, try https://www.aconvert.com/file.php
      command("fontforge -quiet -script #{@convert_script} #{@output_font_file} woff")

      command("fontforge -quiet -script #{@convert_script} #{@output_font_file} eot")
      command("rm -f #{@output_font_file.dirname.join('*.afm')}")
      puts 'Export PNG in tmp/pngs dir...'.yellow
      export_png

      puts 'Write paths stylesheet...'.yellow

      # Write SCSS file to manage list of icons
      File.open(@assets.join('stylesheets', 'agric', 'paths.scss'), 'wb') do |f|
        f.write "/* Auto-generated. Nothing to touch */\n"
        f.write "@font-face {\n"
        f.write "  font-family: '#{META[:family]}';\n"
        f.write "  font-weight: normal;\n"
        f.write "  font-style: normal;\n"
        f.write "  src: font-url('#{META[:filename]}.eot?v=#{META[:version]}');\n"
        f.write "  src: font-url('#{META[:filename]}.eot?#iefix&v=#{META[:version]}') format('embedded-opentype'),\n"
        f.write "    font-url('#{META[:filename]}.woff?v=#{META[:version]}') format('woff'),\n"
        f.write "    font-url('#{META[:filename]}.ttf?v=#{META[:version]}') format('truetype'),\n"
        f.write "    font-url('#{META[:filename]}.svg?v=#{META[:version]}') format('svg');\n"
        f.write "}\n"
      end

      puts 'Write list stylesheet...'.yellow
      File.open(@assets.join('stylesheets', 'agric', 'list.scss'), 'wb') do |f|
        f.write "/* Auto-generated. Nothing to touch! */\n"
        f.write "$agric-icons: (\n"
        icons.sort.each do |name, code|
          f.write "  (\"#{name}\" \"\\#{code}\")\n"
        end
        f.write ")\n"
      end

      puts 'Write icons stylesheet...'.yellow
      File.open(@assets.join('stylesheets', 'agric', 'icons.scss'), 'wb') do |f|
        f.write "/* Auto-generated. Nothing to touch! */\n"
        for name, code in icons.sort
          f.write "$agric-icons-#{name}: \"\\#{code}\";\n"
        end
        f.write "\n"
        for name, code in icons.sort
          f.write ".icon-#{name}:before { content: $agric-icons-#{name} };\n"
        end
      end

      puts 'Finished!'.green
    end
  end
end

Agric::Compiler.new.compile!
